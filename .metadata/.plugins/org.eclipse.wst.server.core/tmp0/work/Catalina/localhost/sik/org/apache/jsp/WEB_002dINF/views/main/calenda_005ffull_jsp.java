/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.78
 * Generated at: 2023-10-13 06:56:25 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.main;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class calenda_005ffull_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.10.2/fullcalendar.min.css\" />\r\n");
      out.write("<script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/2.11.6/umd/popper.min.js\" crossorigin=\"anonymous\"></script>\r\n");
      out.write("<script src=\"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js\" crossorigin=\"anonymous\"></script>\r\n");
      out.write("<script src=\"https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.10.2/fullcalendar.min.js\" crossorigin=\"anonymous\"></script>\r\n");
      out.write("	<style>\r\n");
      out.write("\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <div class=\"container\" style=\"padding:10px\">\r\n");
      out.write("        <div id=\"calendar\"></div>\r\n");
      out.write("    </div>\r\n");
      out.write("    <!-- Event Modal -->\r\n");
      out.write("    <div class=\"modal fade\" id=\"eventModal\" tabindex=\"-1\" aria-labelledby=\"eventModalLabel\" aria-hidden=\"true\">\r\n");
      out.write("        <div class=\"modal-dialog\">\r\n");
      out.write("            <div class=\"modal-content\">\r\n");
      out.write("                <div class=\"modal-header\">\r\n");
      out.write("                    <h5 class=\"modal-title\" id=\"eventModalLabel\">New Event</h5>\r\n");
      out.write("                    <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n");
      out.write("                </div>\r\n");
      out.write("                <div class=\"modal-body\">\r\n");
      out.write("                    <!-- 이벤트 정보 입력란-->\r\n");
      out.write("                    <div class=\"mb-3\">\r\n");
      out.write("                        <label for=\"inputTitle\" class=\"form-label\">Title</label>\r\n");
      out.write("                        <input type=\"text\" class=\"form-control\" id=\"inputTitle\">\r\n");
      out.write("                    </div>\r\n");
      out.write("                </div>\r\n");
      out.write("                <div class=\"modal-footer\">\r\n");
      out.write("                    <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close</button>\r\n");
      out.write("                    <button type=\"button\" class=\"btn btn-primary\" onclick=\"saveEvent()\">Save</button>\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <!-- JS -->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    <script>\r\n");
      out.write("        // 변수 선언\r\n");
      out.write("        var calendar;\r\n");
      out.write("        var event;\r\n");
      out.write("\r\n");
      out.write("        // FullCalendar 초기화\r\n");
      out.write("        $(document).ready(function () {\r\n");
      out.write("            calendar = $('#calendar').fullCalendar({\r\n");
      out.write("                // FullCalendar 옵션 설정\r\n");
      out.write("                header: {\r\n");
      out.write("                    left: 'prev,next today',\r\n");
      out.write("                    center: 'title',\r\n");
      out.write("                    right: 'month,agendaWeek,agendaDay'\r\n");
      out.write("                },\r\n");
      out.write("                navLinks: true,\r\n");
      out.write("                selectable: true,\r\n");
      out.write("                selectHelper: true,\r\n");
      out.write("                editable: true,\r\n");
      out.write("                eventLimit: true,\r\n");
      out.write("\r\n");
      out.write("                // 이벤트 클릭 이벤트 처리\r\n");
      out.write("                eventClick: function (calEvent, jsEvent, view) {\r\n");
      out.write("                    event = calEvent;\r\n");
      out.write("                    $('#inputTitle').val(calEvent.title);\r\n");
      out.write("                    $('#eventModalLabel').text('Edit Event');\r\n");
      out.write("                    $('#eventModal').modal('show');\r\n");
      out.write("                },\r\n");
      out.write("\r\n");
      out.write("                // 날짜 클릭 이벤트 처리\r\n");
      out.write("                dayClick: function (date, jsEvent, view) {\r\n");
      out.write("                    event = null;\r\n");
      out.write("                    $('#inputTitle').val('');\r\n");
      out.write("                    $('#eventModalLabel').text('New Event');\r\n");
      out.write("                    $('#eventModal').modal('show');\r\n");
      out.write("                },\r\n");
      out.write("            });\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        // 이벤트 생성 및 수정 함수 추가\r\n");
      out.write("        function saveEvent() {\r\n");
      out.write("            var title = $('#inputTitle').val();\r\n");
      out.write("\r\n");
      out.write("            if (title) {\r\n");
      out.write("                var eventData = {\r\n");
      out.write("                    title: title,\r\n");
      out.write("                    start: event ? event.start : $('#calendar').fullCalendar('getDate'),\r\n");
      out.write("                    end: event ? event.end : null,\r\n");
      out.write("                };\r\n");
      out.write("\r\n");
      out.write("                if (event) {\r\n");
      out.write("                    // 이벤트 수정\r\n");
      out.write("                    event.title = title;\r\n");
      out.write("                    $('#calendar').fullCalendar('updateEvent', event);\r\n");
      out.write("                } else {\r\n");
      out.write("                    // 이벤트 생성\r\n");
      out.write("                    $('#calendar').fullCalendar('renderEvent', eventData, true);\r\n");
      out.write("                }\r\n");
      out.write("                $('#eventModal').modal('hide');\r\n");
      out.write("            } else {\r\n");
      out.write("                alert('Title is required');\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("    </script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
